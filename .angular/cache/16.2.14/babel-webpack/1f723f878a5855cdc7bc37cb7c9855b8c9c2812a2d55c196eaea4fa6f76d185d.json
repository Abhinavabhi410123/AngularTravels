{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let BookingComponent = class BookingComponent {\n  constructor(fb, x) {\n    this.fb = fb;\n    this.x = x;\n    this.travelDetails = [{\n      place: 'Paris, France',\n      price: 1200,\n      difficultyLevel: 'Easy'\n    }, {\n      place: 'Mount Everest Base Camp, Nepal',\n      price: 2500,\n      difficultyLevel: 'Hard'\n    }, {\n      place: 'Kyoto, Japan',\n      price: 1800,\n      difficultyLevel: 'Moderate'\n    }, {\n      place: 'Great Barrier Reef, Australia',\n      price: 2200,\n      difficultyLevel: 'Moderate'\n    }, {\n      place: 'Machu Picchu, Peru',\n      price: 1700,\n      difficultyLevel: 'Hard'\n    }, {\n      place: 'Santorini, Greece',\n      price: 1300,\n      difficultyLevel: 'Easy'\n    }, {\n      place: 'Grand Canyon, USA',\n      price: 900,\n      difficultyLevel: 'Moderate'\n    }, {\n      place: 'Banff National Park, Canada',\n      price: 1100,\n      difficultyLevel: 'Moderate'\n    }, {\n      place: 'Iceland Ring Road, Iceland',\n      price: 3000,\n      difficultyLevel: 'Hard'\n    }, {\n      place: 'Bali, Indonesia',\n      price: 1000,\n      difficultyLevel: 'Easy'\n    }];\n    this.registrationForm = this.fb.group({\n      fromDestination: ['', Validators.required],\n      toDestination: ['', Validators.required],\n      price: ['', [Validators.required, Validators.min(1)]],\n      date: ['', Validators.required],\n      terms: [false, Validators.requiredTrue]\n    });\n  }\n  onSubmit() {\n    if (this.registrationForm.valid) {\n      console.log('Form Submitted!', this.registrationForm.value);\n      this.x.insertbookings(this.registrationForm.value).subscribe(res => {\n        if (res) {\n          console.log(\"resgistratio sucessful\");\n        } else {\n          console.log(\"resgistration failed\");\n        }\n      });\n    } else {\n      console.log('Form is invalid');\n    }\n  }\n};\nBookingComponent = __decorate([Component({\n  selector: 'app-booking',\n  templateUrl: './booking.component.html',\n  styleUrls: ['./booking.component.css']\n})], BookingComponent);","map":{"version":3,"names":["Component","Validators","BookingComponent","constructor","fb","x","travelDetails","place","price","difficultyLevel","registrationForm","group","fromDestination","required","toDestination","min","date","terms","requiredTrue","onSubmit","valid","console","log","value","insertbookings","subscribe","res","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\saik4\\Tourism\\src\\app\\components\\booking\\booking.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MyService } from 'src/app/services/my.service';\n\n@Component({\n  selector: 'app-booking',\n  templateUrl: './booking.component.html',\n  styleUrls: ['./booking.component.css']\n})\nexport class BookingComponent {\n  registrationForm: FormGroup;\n\n  constructor(private fb: FormBuilder,private x:MyService) {\n    this.registrationForm = this.fb.group({\n      fromDestination: ['', Validators.required],\n      toDestination: ['', Validators.required],\n      price: ['', [Validators.required, Validators.min(1)]],\n      date: ['', Validators.required],\n      terms: [false, Validators.requiredTrue],\n    });\n  }\n\n  onSubmit() {\n    if (this.registrationForm.valid) {\n      console.log('Form Submitted!', this.registrationForm.value);\n      this.x.insertbookings(this.registrationForm.value).subscribe((res)=>{\n        if(res){\n          console.log(\"resgistratio sucessful\")\n        }\n        else\n        {\n          console.log(\"resgistration failed\")\n        }\n      }\n    )\n    } else {\n      console.log('Form is invalid');\n    }\n}\ntravelDetails = [\n  {\n    place: 'Paris, France',\n    price: 1200,\n    difficultyLevel: 'Easy'\n  },\n  {\n    place: 'Mount Everest Base Camp, Nepal',\n    price: 2500,\n    difficultyLevel: 'Hard'\n  },\n  {\n    place: 'Kyoto, Japan',\n    price: 1800,\n    difficultyLevel: 'Moderate'\n  },\n  {\n    place: 'Great Barrier Reef, Australia',\n    price: 2200,\n    difficultyLevel: 'Moderate'\n  },\n  {\n    place: 'Machu Picchu, Peru',\n    price: 1700,\n    difficultyLevel: 'Hard'\n  },\n  {\n    place: 'Santorini, Greece',\n    price: 1300,\n    difficultyLevel: 'Easy'\n  },\n  {\n    place: 'Grand Canyon, USA',\n    price: 900,\n    difficultyLevel: 'Moderate'\n  },\n  {\n    place: 'Banff National Park, Canada',\n    price: 1100,\n    difficultyLevel: 'Moderate'\n  },\n  {\n    place: 'Iceland Ring Road, Iceland',\n    price: 3000,\n    difficultyLevel: 'Hard'\n  },\n  {\n    place: 'Bali, Indonesia',\n    price: 1000,\n    difficultyLevel: 'Easy'\n  }\n];\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAG3BC,YAAoBC,EAAe,EAASC,CAAW;IAAnC,KAAAD,EAAE,GAAFA,EAAE;IAAsB,KAAAC,CAAC,GAADA,CAAC;IA2B/C,KAAAC,aAAa,GAAG,CACd;MACEC,KAAK,EAAE,eAAe;MACtBC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,gCAAgC;MACvCC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,cAAc;MACrBC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,+BAA+B;MACtCC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,oBAAoB;MAC3BC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,mBAAmB;MAC1BC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,mBAAmB;MAC1BC,KAAK,EAAE,GAAG;MACVC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,6BAA6B;MACpCC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,4BAA4B;MACnCC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,EACD;MACEF,KAAK,EAAE,iBAAiB;MACxBC,KAAK,EAAE,IAAI;MACXC,eAAe,EAAE;KAClB,CACF;IA7EG,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MACpCC,eAAe,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAC1CC,aAAa,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ,CAAC;MACxCL,KAAK,EAAE,CAAC,EAAE,EAAE,CAACP,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACc,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACrDC,IAAI,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ,CAAC;MAC/BI,KAAK,EAAE,CAAC,KAAK,EAAEhB,UAAU,CAACiB,YAAY;KACvC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACT,gBAAgB,CAACU,KAAK,EAAE;MAC/BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACZ,gBAAgB,CAACa,KAAK,CAAC;MAC3D,IAAI,CAAClB,CAAC,CAACmB,cAAc,CAAC,IAAI,CAACd,gBAAgB,CAACa,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAG;QAClE,IAAGA,GAAG,EAAC;UACLL,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;SACtC,MAED;UACED,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;MAEvC,CAAC,CACF;KACA,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;EAEpC;CAqDC;AAlFYpB,gBAAgB,GAAAyB,UAAA,EAL5B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACW5B,gBAAgB,CAkF5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}